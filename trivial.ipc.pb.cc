// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trivial.ipc.proto

#include "trivial.ipc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace trivial {
namespace ipc {
class UnaryCallRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnaryCallRequest> _instance;
} _UnaryCallRequest_default_instance_;
class UnaryCallReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnaryCallReply> _instance;
} _UnaryCallReply_default_instance_;
}  // namespace ipc
}  // namespace trivial
static void InitDefaultsscc_info_UnaryCallReply_trivial_2eipc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trivial::ipc::_UnaryCallReply_default_instance_;
    new (ptr) ::trivial::ipc::UnaryCallReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trivial::ipc::UnaryCallReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnaryCallReply_trivial_2eipc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UnaryCallReply_trivial_2eipc_2eproto}, {}};

static void InitDefaultsscc_info_UnaryCallRequest_trivial_2eipc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::trivial::ipc::_UnaryCallRequest_default_instance_;
    new (ptr) ::trivial::ipc::UnaryCallRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::trivial::ipc::UnaryCallRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnaryCallRequest_trivial_2eipc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UnaryCallRequest_trivial_2eipc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_trivial_2eipc_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_trivial_2eipc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_trivial_2eipc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_trivial_2eipc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trivial::ipc::UnaryCallRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trivial::ipc::UnaryCallRequest, i_),
  PROTOBUF_FIELD_OFFSET(::trivial::ipc::UnaryCallRequest, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::trivial::ipc::UnaryCallReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::trivial::ipc::UnaryCallReply, i_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::trivial::ipc::UnaryCallRequest)},
  { 7, -1, sizeof(::trivial::ipc::UnaryCallReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trivial::ipc::_UnaryCallRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::trivial::ipc::_UnaryCallReply_default_instance_),
};

const char descriptor_table_protodef_trivial_2eipc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021trivial.ipc.proto\022\013trivial.ipc\"0\n\020Unar"
  "yCallRequest\022\t\n\001i\030\001 \003(\003\022\021\n\ttimestamp\030\002 \001"
  "(\022\"\033\n\016UnaryCallReply\022\t\n\001i\030\001 \001(\0032W\n\nRPCSe"
  "rvice\022I\n\tUnaryCall\022\035.trivial.ipc.UnaryCa"
  "llRequest\032\033.trivial.ipc.UnaryCallReply\"\000"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_trivial_2eipc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_trivial_2eipc_2eproto_sccs[2] = {
  &scc_info_UnaryCallReply_trivial_2eipc_2eproto.base,
  &scc_info_UnaryCallRequest_trivial_2eipc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_trivial_2eipc_2eproto_once;
static bool descriptor_table_trivial_2eipc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trivial_2eipc_2eproto = {
  &descriptor_table_trivial_2eipc_2eproto_initialized, descriptor_table_protodef_trivial_2eipc_2eproto, "trivial.ipc.proto", 208,
  &descriptor_table_trivial_2eipc_2eproto_once, descriptor_table_trivial_2eipc_2eproto_sccs, descriptor_table_trivial_2eipc_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_trivial_2eipc_2eproto::offsets,
  file_level_metadata_trivial_2eipc_2eproto, 2, file_level_enum_descriptors_trivial_2eipc_2eproto, file_level_service_descriptors_trivial_2eipc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_trivial_2eipc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_trivial_2eipc_2eproto), true);
namespace trivial {
namespace ipc {

// ===================================================================

void UnaryCallRequest::InitAsDefaultInstance() {
}
class UnaryCallRequest::_Internal {
 public:
};

UnaryCallRequest::UnaryCallRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trivial.ipc.UnaryCallRequest)
}
UnaryCallRequest::UnaryCallRequest(const UnaryCallRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      i_(from.i_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:trivial.ipc.UnaryCallRequest)
}

void UnaryCallRequest::SharedCtor() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}

UnaryCallRequest::~UnaryCallRequest() {
  // @@protoc_insertion_point(destructor:trivial.ipc.UnaryCallRequest)
  SharedDtor();
}

void UnaryCallRequest::SharedDtor() {
}

void UnaryCallRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnaryCallRequest& UnaryCallRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnaryCallRequest_trivial_2eipc_2eproto.base);
  return *internal_default_instance();
}


void UnaryCallRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:trivial.ipc.UnaryCallRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i_.Clear();
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UnaryCallRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 i = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_i(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UnaryCallRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:trivial.ipc.UnaryCallRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 i = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_i())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_i())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint64 timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trivial.ipc.UnaryCallRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trivial.ipc.UnaryCallRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UnaryCallRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trivial.ipc.UnaryCallRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 i = 1;
  if (this->i_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_i_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->i_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->i(i), output);
  }

  // sint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64(2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trivial.ipc.UnaryCallRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UnaryCallRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trivial.ipc.UnaryCallRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 i = 1;
  if (this->i_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _i_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->i_, target);
  }

  // sint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trivial.ipc.UnaryCallRequest)
  return target;
}

size_t UnaryCallRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trivial.ipc.UnaryCallRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 i = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->i_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _i_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // sint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->timestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnaryCallRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trivial.ipc.UnaryCallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnaryCallRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnaryCallRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trivial.ipc.UnaryCallRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trivial.ipc.UnaryCallRequest)
    MergeFrom(*source);
  }
}

void UnaryCallRequest::MergeFrom(const UnaryCallRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trivial.ipc.UnaryCallRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  i_.MergeFrom(from.i_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void UnaryCallRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trivial.ipc.UnaryCallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnaryCallRequest::CopyFrom(const UnaryCallRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trivial.ipc.UnaryCallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnaryCallRequest::IsInitialized() const {
  return true;
}

void UnaryCallRequest::InternalSwap(UnaryCallRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  i_.InternalSwap(&other->i_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnaryCallRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnaryCallReply::InitAsDefaultInstance() {
}
class UnaryCallReply::_Internal {
 public:
};

UnaryCallReply::UnaryCallReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:trivial.ipc.UnaryCallReply)
}
UnaryCallReply::UnaryCallReply(const UnaryCallReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  i_ = from.i_;
  // @@protoc_insertion_point(copy_constructor:trivial.ipc.UnaryCallReply)
}

void UnaryCallReply::SharedCtor() {
  i_ = PROTOBUF_LONGLONG(0);
}

UnaryCallReply::~UnaryCallReply() {
  // @@protoc_insertion_point(destructor:trivial.ipc.UnaryCallReply)
  SharedDtor();
}

void UnaryCallReply::SharedDtor() {
}

void UnaryCallReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnaryCallReply& UnaryCallReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnaryCallReply_trivial_2eipc_2eproto.base);
  return *internal_default_instance();
}


void UnaryCallReply::Clear() {
// @@protoc_insertion_point(message_clear_start:trivial.ipc.UnaryCallReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UnaryCallReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 i = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UnaryCallReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:trivial.ipc.UnaryCallReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 i = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:trivial.ipc.UnaryCallReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:trivial.ipc.UnaryCallReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UnaryCallReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:trivial.ipc.UnaryCallReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 i = 1;
  if (this->i() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->i(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:trivial.ipc.UnaryCallReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* UnaryCallReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:trivial.ipc.UnaryCallReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 i = 1;
  if (this->i() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->i(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trivial.ipc.UnaryCallReply)
  return target;
}

size_t UnaryCallReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trivial.ipc.UnaryCallReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 i = 1;
  if (this->i() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->i());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnaryCallReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:trivial.ipc.UnaryCallReply)
  GOOGLE_DCHECK_NE(&from, this);
  const UnaryCallReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnaryCallReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:trivial.ipc.UnaryCallReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:trivial.ipc.UnaryCallReply)
    MergeFrom(*source);
  }
}

void UnaryCallReply::MergeFrom(const UnaryCallReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:trivial.ipc.UnaryCallReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.i() != 0) {
    set_i(from.i());
  }
}

void UnaryCallReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:trivial.ipc.UnaryCallReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnaryCallReply::CopyFrom(const UnaryCallReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trivial.ipc.UnaryCallReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnaryCallReply::IsInitialized() const {
  return true;
}

void UnaryCallReply::InternalSwap(UnaryCallReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(i_, other->i_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnaryCallReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ipc
}  // namespace trivial
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trivial::ipc::UnaryCallRequest* Arena::CreateMaybeMessage< ::trivial::ipc::UnaryCallRequest >(Arena* arena) {
  return Arena::CreateInternal< ::trivial::ipc::UnaryCallRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::trivial::ipc::UnaryCallReply* Arena::CreateMaybeMessage< ::trivial::ipc::UnaryCallReply >(Arena* arena) {
  return Arena::CreateInternal< ::trivial::ipc::UnaryCallReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
