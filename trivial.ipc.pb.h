// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trivial.ipc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trivial_2eipc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trivial_2eipc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trivial_2eipc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trivial_2eipc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trivial_2eipc_2eproto;
namespace trivial {
namespace ipc {
class UnaryCallReply;
class UnaryCallReplyDefaultTypeInternal;
extern UnaryCallReplyDefaultTypeInternal _UnaryCallReply_default_instance_;
class UnaryCallRequest;
class UnaryCallRequestDefaultTypeInternal;
extern UnaryCallRequestDefaultTypeInternal _UnaryCallRequest_default_instance_;
}  // namespace ipc
}  // namespace trivial
PROTOBUF_NAMESPACE_OPEN
template<> ::trivial::ipc::UnaryCallReply* Arena::CreateMaybeMessage<::trivial::ipc::UnaryCallReply>(Arena*);
template<> ::trivial::ipc::UnaryCallRequest* Arena::CreateMaybeMessage<::trivial::ipc::UnaryCallRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace trivial {
namespace ipc {

// ===================================================================

class UnaryCallRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trivial.ipc.UnaryCallRequest) */ {
 public:
  UnaryCallRequest();
  virtual ~UnaryCallRequest();

  UnaryCallRequest(const UnaryCallRequest& from);
  UnaryCallRequest(UnaryCallRequest&& from) noexcept
    : UnaryCallRequest() {
    *this = ::std::move(from);
  }

  inline UnaryCallRequest& operator=(const UnaryCallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnaryCallRequest& operator=(UnaryCallRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnaryCallRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnaryCallRequest* internal_default_instance() {
    return reinterpret_cast<const UnaryCallRequest*>(
               &_UnaryCallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UnaryCallRequest& a, UnaryCallRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnaryCallRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnaryCallRequest* New() const final {
    return CreateMaybeMessage<UnaryCallRequest>(nullptr);
  }

  UnaryCallRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnaryCallRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnaryCallRequest& from);
  void MergeFrom(const UnaryCallRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnaryCallRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trivial.ipc.UnaryCallRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trivial_2eipc_2eproto);
    return ::descriptor_table_trivial_2eipc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // repeated int64 i = 1;
  int i_size() const;
  void clear_i();
  ::PROTOBUF_NAMESPACE_ID::int64 i(int index) const;
  void set_i(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_i(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      i() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_i();

  // sint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:trivial.ipc.UnaryCallRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > i_;
  mutable std::atomic<int> _i_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trivial_2eipc_2eproto;
};
// -------------------------------------------------------------------

class UnaryCallReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trivial.ipc.UnaryCallReply) */ {
 public:
  UnaryCallReply();
  virtual ~UnaryCallReply();

  UnaryCallReply(const UnaryCallReply& from);
  UnaryCallReply(UnaryCallReply&& from) noexcept
    : UnaryCallReply() {
    *this = ::std::move(from);
  }

  inline UnaryCallReply& operator=(const UnaryCallReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnaryCallReply& operator=(UnaryCallReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnaryCallReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnaryCallReply* internal_default_instance() {
    return reinterpret_cast<const UnaryCallReply*>(
               &_UnaryCallReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UnaryCallReply& a, UnaryCallReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UnaryCallReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnaryCallReply* New() const final {
    return CreateMaybeMessage<UnaryCallReply>(nullptr);
  }

  UnaryCallReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnaryCallReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnaryCallReply& from);
  void MergeFrom(const UnaryCallReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnaryCallReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trivial.ipc.UnaryCallReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trivial_2eipc_2eproto);
    return ::descriptor_table_trivial_2eipc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIFieldNumber = 1,
  };
  // int64 i = 1;
  void clear_i();
  ::PROTOBUF_NAMESPACE_ID::int64 i() const;
  void set_i(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:trivial.ipc.UnaryCallReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 i_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trivial_2eipc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UnaryCallRequest

// repeated int64 i = 1;
inline int UnaryCallRequest::i_size() const {
  return i_.size();
}
inline void UnaryCallRequest::clear_i() {
  i_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnaryCallRequest::i(int index) const {
  // @@protoc_insertion_point(field_get:trivial.ipc.UnaryCallRequest.i)
  return i_.Get(index);
}
inline void UnaryCallRequest::set_i(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  i_.Set(index, value);
  // @@protoc_insertion_point(field_set:trivial.ipc.UnaryCallRequest.i)
}
inline void UnaryCallRequest::add_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  i_.Add(value);
  // @@protoc_insertion_point(field_add:trivial.ipc.UnaryCallRequest.i)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
UnaryCallRequest::i() const {
  // @@protoc_insertion_point(field_list:trivial.ipc.UnaryCallRequest.i)
  return i_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
UnaryCallRequest::mutable_i() {
  // @@protoc_insertion_point(field_mutable_list:trivial.ipc.UnaryCallRequest.i)
  return &i_;
}

// sint64 timestamp = 2;
inline void UnaryCallRequest::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnaryCallRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:trivial.ipc.UnaryCallRequest.timestamp)
  return timestamp_;
}
inline void UnaryCallRequest::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:trivial.ipc.UnaryCallRequest.timestamp)
}

// -------------------------------------------------------------------

// UnaryCallReply

// int64 i = 1;
inline void UnaryCallReply::clear_i() {
  i_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UnaryCallReply::i() const {
  // @@protoc_insertion_point(field_get:trivial.ipc.UnaryCallReply.i)
  return i_;
}
inline void UnaryCallReply::set_i(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  i_ = value;
  // @@protoc_insertion_point(field_set:trivial.ipc.UnaryCallReply.i)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ipc
}  // namespace trivial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trivial_2eipc_2eproto
